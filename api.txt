1 ==> API qu'est-ce que c'est ? 
    Application programming interface : 
    c'est une application web qui permet de fournir des données a un client 
    l'api va avoir acces a une base de données , et pourras renvoyer avec ou sans conditions ces données modifié ou pas .

2 ==> REST qu'est-ce que c'est ? 

    REST (Representational State Transfer) est un style d'architecture pour la conception d'API. 
    Il repose sur des principes comme l'utilisation de méthodes standardisées (GET, POST, etc.), 
    l'absence d'état côté serveur (stateless), l'accès aux ressources via des URL, et l'échange de données généralement au format JSON ou XML. 
    REST vise la simplicité, la scalabilité et l'indépendance entre client et serveur.


3 ==> ENDPOINT qu'est-ce que c'est ? 

    Un endpoint est une URL spécifique d'une API à laquelle un client peut envoyer une requête pour accéder à une ressource ou effectuer une action. 
    Chaque endpoint correspond à une fonctionnalité ou à une ressource précise, par exemple la liste des utilisateurs ou la création d'un nouvel élément.
    Ex : https:/monsite.com/product/1

4 ==> JSON qu'est-ce que c'est ? 

    JSON (JavaScript Object Notation) est un format léger d'échange de données, facile à lire et à écrire pour les humains, et simple à analyser et à générer pour les machines. 
    Il est largement utilisé pour transmettre des données entre un client et un serveur dans les API web.

5 ==> Validation qu'est-ce que c'est ? 

    La validation consiste à vérifier que les données reçues (par exemple via une API) respectent certaines règles ou contraintes (type, format, valeurs autorisées, etc.). 
    Elle permet d'assurer l'intégrité et la cohérence des données avant de les traiter ou de les stocker.

6 ==> Status code qu'est-ce que c'est ? 

    Un code de statut est une valeur numérique renvoyée par une API pour indiquer le résultat d'une requête. 
    Par exemple, 200 signifie succès, 404 indique que la ressource n'a pas été trouvée, et 500 signale une erreur interne. 
    Ces codes permettent au client de comprendre l'état de la réponse.

7 ==> Serialisation code qu'est-ce que c'est ? 

    La sérialisation est le processus de transformation d'un objet ou d'une structure de données en un format qui peut être transmis (par exemple, en JSON ou XML) ou stocké. 
    Cela permet d'envoyer des données complexes via une API de manière standardisée.

8 ==> Deserialisation code qu'est-ce que c'est ? 

    La désérialisation est l'opération inverse de la sérialisation : elle consiste à convertir des données reçues (par exemple, au format JSON) en objets ou structures exploitables par le système.

9 ==> API WEB code qu'est-ce que c'est ? 

    Une API web est une interface accessible via le réseau (généralement Internet) qui permet à des applications ou services d'échanger des données et d'interagir à distance. 
    Elle utilise des protocoles web comme HTTP pour la communication.

10 ==> Comment developper une api ? 

    Pour développer une API, il faut :
    - Définir les besoins et les ressources à exposer
    - Concevoir les endpoints et les méthodes associées
    - Choisir les formats d'échange de données (souvent JSON)
    - Mettre en place la validation des données
    - Gérer les codes de statut pour informer le client du résultat
    - Documenter l'API pour faciliter son utilisation par d'autres développeurs


############################################################################################################################################################################################################

Creer l'environnement venv : 
L’environnement virtuel permet d’isoler les dépendances du projet 
pour qu’elles ne gênent pas d’autres projets Python sur ton ordinateur.

    python -m venv venv 


############################################################################################################################################################################################################


Installations des dépendances nécéssaires : 

creer un fichier à la racine de ton projet

    requirements.txt

dans ce fichiers nous allons noté les dépendances que nous allons utilisé dans ce cas ci :

    django                  
    djangorestframework   
    requests                
    django-cors-headers

# django : framework Python pour créer des sites web et API.

# djangorestframework : permet de créer facilement des API REST.

# requests : permet de faire des requêtes HTTP depuis Python (simulateur front-end).

# django-cors-headers : gère les autorisations Cross-Origin (CORS) pour les API. 

Ensuite executer à la racine la commande pour tout installer: 

    pip install -r requirements.txt



############################################################################################################################################################################################################

Verifier les variable d'environnements , Ceci assure que Python et pip sont correctement installés : 

python --version
pip --version


############################################################################################################################################################################################################

Creer une api : 

Ouvrir la console dans le dossiers backend et executer la commande 

    django-admin start-project core . 



Ensuite creer l'api avec la commande : 

    django-admin startapp api


############################################################################################################################################################################################################

Dans settings.py ajouter dans INSTALLED_APPS : 

    INSTALLED_APPS = [
        ...
        'api',
        'rest_framework',
        'corsheaders',
    ]

et dans MIDDLEWARE : 

    MIDDLEWARE = [
        'corsheaders.middleware.CorsMiddleware',  # doit être en haut
        'django.middleware.common.CommonMiddleware',  # juste après
        ...
    ]


############################################################################################################################################################################################################

Ensuite dans le dossiers api creer un fichiers api/urls.py 
toutes les routes définies dans api/urls.py seront accessibles sous /api/v1/ : 

    from django.urls import path
    from .views import echo


    urlpatterns = [
        path("echo", echo, name="echo"),
    ]


Dans core/urls.py nous avons :

    from django.contrib import admin
    from django.urls import path, include

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('api/v1/', include('api.urls')),  # toutes les URLs de l'API
    ]


Dans core/urls.py nous avons :

    from django.contrib import admin
    from django.urls import path , include

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('api/v1/', include('api.urls')),
    ]


############################################################################################################################################################################################################

Ensuite dans api/views.py importer le JsonResponse et définir une methode qui s'appelle echo et qui renvoie des données au format json :

    from django.shortcuts import render
    from django.http import JsonResponse

    def echo(request):
        return JsonResponse({"users": [
            {"id": 1, "name": "John Doe", "email": "john@example.com" },
            {"id": 2, "name": "Jane Smith", "email": "jane@example.com"},
        ]
                            })




############################################################################################################################################################################################################

Dans le dossier clients ajouter un fichier test.py dans lequel ajouter : 

    import requests

    endpoint = "http://localhost:8000/api/v1/echo"

    response = requests.get(endpoint)

Ce qui permet de simuler un appel du frontend 


############################################################################################################################################################################################################

On remarque que l'on a une reponse lors d'un appel sur notre route , et que l'on peut passer un paramètres dans la route 
 